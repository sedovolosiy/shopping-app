import { BASE_CATEGORY_PATTERNS } from './lib/categorization/patterns/basePatterns';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤...\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
const testItems = ['–º–æ–ª–æ–∫–æ', '—Ö–ª–µ–±', '—è–π—Ü–∞', '–º—è—Å–æ', '–æ–≥—É—Ä—Ü—ã', '–ø–æ–º–∏–¥–æ—Ä—ã'];

function categorizeItem(item: string) {
  console.log(`\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: "${item}" ---`);
  
  let bestMatch = null;
  let maxConfidence = 0;
  
  for (const [category, pattern] of Object.entries(BASE_CATEGORY_PATTERNS)) {
    let confidence = 0;
    let matchedTerms: string[] = [];
    
    // Keyword matching
    for (const keyword of pattern.keywords) {
      if (item.toLowerCase().includes(keyword.toLowerCase())) {
        confidence += 2.0; // exactMatch weight
        matchedTerms.push(keyword);
        console.log(`‚úÖ Keyword match: "${keyword}" in category "${category}"`);
      }
    }
    
    // Pattern matching
    for (const regex of pattern.patterns) {
      if (regex.test(item)) {
        confidence += 1.5; // patternMatch weight
        console.log(`‚úÖ Pattern match: ${regex} in category "${category}"`);
      }
    }
    
    // Apply pattern weight
    confidence *= pattern.weight;
    
    if (confidence > maxConfidence) {
      maxConfidence = confidence;
      bestMatch = {
        category,
        confidence,
        matchedTerms
      };
    }
  }
  
  if (bestMatch) {
    console.log(`üèÜ Best match: ${bestMatch.category} (confidence: ${bestMatch.confidence.toFixed(2)})`);
    return bestMatch;
  } else {
    console.log(`‚ùå No match found`);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testItems.forEach(categorizeItem);
