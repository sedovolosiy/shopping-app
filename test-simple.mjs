// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
import { BASE_CATEGORY_PATTERNS } from "./lib/categorization/patterns/basePatterns.js";

console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...\n");

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
const testItems = ["–º–æ–ª–æ–∫–æ", "—Ö–ª–µ–±", "—è–π—Ü–∞", "–º—è—Å–æ", "–æ–≥—É—Ä—Ü—ã", "–ø–æ–º–∏–¥–æ—Ä—ã"];

testItems.forEach((item) => {
  console.log(`\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: "${item}" ---`);

  let bestMatch = null;
  let maxConfidence = 0;

  for (const [category, pattern] of Object.entries(BASE_CATEGORY_PATTERNS)) {
    let confidence = 0;
    let matchedTerms = [];

    // Keyword matching
    for (const keyword of pattern.keywords) {
      if (item.toLowerCase().includes(keyword.toLowerCase())) {
        confidence += 2.0; // exactMatch weight
        matchedTerms.push(keyword);
        console.log(`‚úÖ Keyword match: "${keyword}" in category "${category}"`);
      }
    }

    // Pattern matching
    for (const regex of pattern.patterns) {
      if (regex.test(item)) {
        confidence += 1.5; // patternMatch weight
        console.log(`‚úÖ Pattern match: ${regex} in category "${category}"`);
      }
    }

    // Apply pattern weight
    confidence *= pattern.weight;

    if (confidence > maxConfidence) {
      maxConfidence = confidence;
      bestMatch = {
        category,
        confidence,
        matchedTerms,
      };
    }
  }

  if (bestMatch) {
    console.log(
      `üèÜ Best match: ${
        bestMatch.category
      } (confidence: ${bestMatch.confidence.toFixed(2)})`
    );
  } else {
    console.log(`‚ùå No match found`);
  }
});
